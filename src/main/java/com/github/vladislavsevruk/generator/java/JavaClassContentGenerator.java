/*
 * MIT License
 *
 * Copyright (c) 2020 Uladzislau Seuruk
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.github.vladislavsevruk.generator.java;

import com.github.vladislavsevruk.generator.java.comparator.FieldModifierComparator;
import com.github.vladislavsevruk.generator.java.config.JavaClassGeneratorConfig;
import com.github.vladislavsevruk.generator.java.provider.JavaClassContentGeneratorProvider;
import com.github.vladislavsevruk.generator.java.type.SchemaObject;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Generates Java class content for class schemas.
 */
public class JavaClassContentGenerator {

    private final JavaClassContentGeneratorProvider classContentGeneratorProvider;
    private final Comparator<String> fieldModifierComparator;

    public JavaClassContentGenerator(JavaClassContentGeneratorProvider classContentGeneratorProvider) {
        this(classContentGeneratorProvider, new FieldModifierComparator());
    }

    public JavaClassContentGenerator(JavaClassContentGeneratorProvider classContentGeneratorProvider,
            Comparator<String> fieldModifierComparator) {
        this.classContentGeneratorProvider = classContentGeneratorProvider;
        this.fieldModifierComparator = fieldModifierComparator;
    }

    /**
     * Generates Java class content for received class schema according to received configuration parameters.
     *
     * @param config       <code>JavaClassGeneratorConfig</code> with parameters for Java classes generation.
     * @param schemaObject <code>SchemaObject</code> to generate Java class content for.
     * @return <code>String</code> with generated class content.
     */
    public String generate(JavaClassGeneratorConfig config, SchemaObject schemaObject) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("// generated by com.github.vladislavsevruk:java-class-generator\n");
        stringBuilder.append(classContentGeneratorProvider.getPackageGenerator().generate(config, schemaObject));
        appendImports(stringBuilder, config, schemaObject);
        stringBuilder
                .append(classContentGeneratorProvider.getClassDeclarationGenerator().generate(config, schemaObject));
        appendFields(stringBuilder, config, schemaObject);
        classContentGeneratorProvider.getConstructorGenerators()
                .forEach(generator -> stringBuilder.append(generator.generate(config, schemaObject)));
        classContentGeneratorProvider.getMethodGenerators()
                .forEach(generator -> stringBuilder.append(generator.generate(config, schemaObject)));
        stringBuilder.append("}\n");
        return stringBuilder.toString();
    }

    private String addEmptyLineBetweenFields(JavaClassGeneratorConfig config, String field) {
        if (config.isAddEmptyLineBetweenFields()) {
            return field.trim() + "\n\n";
        }
        return field;
    }

    private void appendFields(StringBuilder stringBuilder, JavaClassGeneratorConfig config, SchemaObject schemaObject) {
        classContentGeneratorProvider.getFieldGenerators().stream()
                .map(generator -> generator.generate(config, schemaObject))
                .sorted((f1, f2) -> config.isSortFieldsByModifiers() ? fieldModifierComparator.compare(f1, f2) : 0)
                .map(field -> addEmptyLineBetweenFields(config, field)).forEach(stringBuilder::append);
    }

    private void appendImports(StringBuilder stringBuilder, JavaClassGeneratorConfig config,
            SchemaObject schemaObject) {
        List<String> imports = classContentGeneratorProvider.getImportGenerators().stream()
                .flatMap(generator -> generator.generate(config, schemaObject).stream()).distinct()
                .sorted(String::compareTo).collect(Collectors.toList());
        String prevImportStatement = null;
        for (String importStatement : imports) {
            if (prevImportStatement != null && isDomainDiffers(prevImportStatement, importStatement)) {
                stringBuilder.append("\n");
            }
            stringBuilder.append(importStatement);
            prevImportStatement = importStatement;
        }
        if (!imports.isEmpty()) {
            stringBuilder.append("\n");
        }
    }

    private String getDomain(String value) {
        int startIndex = value.indexOf("import") + "import".length();
        String className = value.substring(startIndex).trim();
        return className.substring(0, className.indexOf('.'));
    }

    private boolean isDomainDiffers(String prevImportStatement, String importStatement) {
        return !getDomain(prevImportStatement).equals(getDomain(importStatement));
    }
}
