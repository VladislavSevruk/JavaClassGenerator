/*
 * MIT License
 *
 * Copyright (c) 2020 Uladzislau Seuruk
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.github.vladislavsevruk.generator.java;

import com.github.vladislavsevruk.generator.java.provider.ClassContentGeneratorProvider;
import com.github.vladislavsevruk.generator.java.provider.EnumContentGeneratorProvider;
import com.github.vladislavsevruk.generator.java.provider.InterfaceContentGeneratorProvider;
import com.github.vladislavsevruk.generator.java.test.JavaClassGeneratorConfigProvider;
import com.github.vladislavsevruk.generator.java.test.mock.MockedEntityBuilder;
import com.github.vladislavsevruk.generator.java.type.SchemaEnum;
import com.github.vladislavsevruk.generator.java.type.SchemaInterface;
import com.github.vladislavsevruk.generator.java.type.SchemaObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class JavaClassContentGeneratorTest {

    @Test
    void generateClassContentConfigWithJacksonAnnotationsTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setFields(4, true).setSuperclass()
                .setInterfaces(2).build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getWithJacksonAnnotations(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n"
                + "import field.mock.MockedFieldType0;\nimport field.mock.MockedFieldType1;\n"
                + "import field.mock.MockedFieldType2;\nimport field.mock.MockedFieldType3;\n\n"
                + "import interface.mock.MockedInterface0;\nimport interface.mock.MockedInterface1;\n\n"
                + "import lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n"
                + "import lombok.experimental.Accessors;\n\nimport superclass.mock.MockedSuperclass;\n\n"
                + "@Accessors(chain = true)\n@Data\n@EqualsAndHashCode(callSuper = true)\n"
                + "@ToString(callSuper = true)\npublic class MockedClass extends MockedSuperclass implements "
                + "MockedInterface0, MockedInterface1 {\n\n    private MockedFieldType0 mockedFieldName0;\n\n"
                + "    @JsonProperty(\"mockedFieldName1\")\n    private MockedFieldType1 mockedFieldName1;\n"
                + "\n    private MockedFieldType2 mockedFieldName2;\n\n    @JsonProperty(\"mockedFieldName3\")\n"
                + "    private MockedFieldType3 mockedFieldName3;\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentConfigWithNonDefaultIndentsTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setFields(4).setSuperclass()
                .setInterfaces(2).build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getWithNonDefaultIndents(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport field.mock.MockedFieldType0;\nimport field.mock.MockedFieldType1;\n"
                + "import field.mock.MockedFieldType2;\nimport field.mock.MockedFieldType3;\n\n"
                + "import interface.mock.MockedInterface0;\nimport interface.mock.MockedInterface1;\n\n"
                + "import lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n"
                + "import lombok.experimental.Accessors;\n\nimport superclass.mock.MockedSuperclass;\n\n"
                + "@Accessors(chain = true)\n@Data\n@EqualsAndHashCode(callSuper = true)\n"
                + "@ToString(callSuper = true)\npublic class MockedClass extends MockedSuperclass implements "
                + "MockedInterface0, MockedInterface1 {\n\n\tprivate MockedFieldType0 mockedFieldName0;\n\n"
                + "\tprivate MockedFieldType1 mockedFieldName1;\n\n"
                + "\tprivate MockedFieldType2 mockedFieldName2;\n\n"
                + "\tprivate MockedFieldType3 mockedFieldName3;\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentConfigWithoutEmptyLinesBetweenFieldsTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setFields(4).setSuperclass()
                .setInterfaces(2).build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getWithoutEmptyLinesBetweenFields(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport field.mock.MockedFieldType0;\nimport field.mock.MockedFieldType1;\n"
                + "import field.mock.MockedFieldType2;\nimport field.mock.MockedFieldType3;\n\n"
                + "import interface.mock.MockedInterface0;\nimport interface.mock.MockedInterface1;\n\n"
                + "import lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n"
                + "import lombok.experimental.Accessors;\n\nimport superclass.mock.MockedSuperclass;\n\n"
                + "@Accessors(chain = true)\n@Data\n@EqualsAndHashCode(callSuper = true)\n"
                + "@ToString(callSuper = true)\npublic class MockedClass extends MockedSuperclass implements "
                + "MockedInterface0, MockedInterface1 {\n\n    private MockedFieldType0 mockedFieldName0;\n"
                + "    private MockedFieldType1 mockedFieldName1;\n"
                + "    private MockedFieldType2 mockedFieldName2;\n"
                + "    private MockedFieldType3 mockedFieldName3;\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentConfigWithoutFieldsSortingByModifiersTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setFields(4).setSuperclass()
                .setInterfaces(2).build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getWithoutFieldsSortingByModifiers(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport field.mock.MockedFieldType0;\nimport field.mock.MockedFieldType1;\n"
                + "import field.mock.MockedFieldType2;\nimport field.mock.MockedFieldType3;\n\n"
                + "import interface.mock.MockedInterface0;\nimport interface.mock.MockedInterface1;\n\n"
                + "import lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.ToString;\n"
                + "import lombok.experimental.Accessors;\n\nimport superclass.mock.MockedSuperclass;\n\n"
                + "@Accessors(chain = true)\n@Data\n@EqualsAndHashCode(callSuper = true)\n"
                + "@ToString(callSuper = true)\npublic class MockedClass extends MockedSuperclass implements "
                + "MockedInterface0, MockedInterface1 {\n\n    private MockedFieldType0 mockedFieldName0;\n\n"
                + "    private MockedFieldType1 mockedFieldName1;\n\n"
                + "    private MockedFieldType2 mockedFieldName2;\n\n"
                + "    private MockedFieldType3 mockedFieldName3;\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentConfigWithoutLombokAnnotationsPrimitivesAndCollectionsTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setPrimitivesAndCollectionsToFields()
                .setName().build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getWithoutLombokAnnotations(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n"
                + "import java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n"
                + "import java.util.Map;\nimport java.util.Objects;\nimport java.util.Set;\n\n"
                + "public class MockedClass {\n\n    private boolean mockedFieldName0;\n\n"
                + "    private byte mockedFieldName1;\n\n    private char mockedFieldName2;\n\n"
                + "    private double mockedFieldName3;\n\n    private float mockedFieldName4;\n\n"
                + "    private int mockedFieldName5;\n\n    private long mockedFieldName6;\n\n"
                + "    private short mockedFieldName7;\n\n    private BigDecimal mockedFieldName8;\n\n"
                + "    private BigInteger mockedFieldName9;\n\n    private Boolean mockedFieldName10;\n"
                + "\n    private Byte mockedFieldName11;\n\n    private Character mockedFieldName12;\n"
                + "\n    private CharSequence mockedFieldName13;\n\n"
                + "    private Double mockedFieldName14;\n\n    private Float mockedFieldName15;\n\n"
                + "    private Integer mockedFieldName16;\n\n    private Long mockedFieldName17;\n\n"
                + "    private Number mockedFieldName18;\n\n    private Object mockedFieldName19;\n\n"
                + "    private Short mockedFieldName20;\n\n    private String mockedFieldName21;\n\n"
                + "    private String[] mockedFieldName22;\n\n"
                + "    private Collection<String> mockedFieldName23;\n\n"
                + "    private Collection mockedFieldName24;\n\n"
                + "    private Iterable<String> mockedFieldName25;\n\n"
                + "    private Iterable mockedFieldName26;\n\n    private List<String> mockedFieldName27;\n"
                + "\n    private List mockedFieldName28;\n\n"
                + "    private Map<String, BigInteger> mockedFieldName29;\n\n"
                + "    private Map mockedFieldName30;\n\n    private Set<String> mockedFieldName31;\n\n"
                + "    private Set mockedFieldName32;\n\n    public boolean isMockedFieldName0() {\n"
                + "        return mockedFieldName0;\n    }\n\n"
                + "    public MockedClass setMockedFieldName0(boolean mockedFieldName0) {\n"
                + "        this.mockedFieldName0 = mockedFieldName0;\n        return this;\n    }\n\n"
                + "    public byte getMockedFieldName1() {\n        return mockedFieldName1;\n    }\n\n"
                + "    public MockedClass setMockedFieldName1(byte mockedFieldName1) {\n"
                + "        this.mockedFieldName1 = mockedFieldName1;\n        return this;\n    }\n\n"
                + "    public char getMockedFieldName2() {\n        return mockedFieldName2;\n    }\n\n"
                + "    public MockedClass setMockedFieldName2(char mockedFieldName2) {\n"
                + "        this.mockedFieldName2 = mockedFieldName2;\n        return this;\n    }\n\n"
                + "    public double getMockedFieldName3() {\n        return mockedFieldName3;\n    }\n"
                + "\n    public MockedClass setMockedFieldName3(double mockedFieldName3) {\n"
                + "        this.mockedFieldName3 = mockedFieldName3;\n        return this;\n    }\n\n"
                + "    public float getMockedFieldName4() {\n        return mockedFieldName4;\n    }\n\n"
                + "    public MockedClass setMockedFieldName4(float mockedFieldName4) {\n"
                + "        this.mockedFieldName4 = mockedFieldName4;\n        return this;\n    }\n\n"
                + "    public int getMockedFieldName5() {\n        return mockedFieldName5;\n    }\n\n"
                + "    public MockedClass setMockedFieldName5(int mockedFieldName5) {\n"
                + "        this.mockedFieldName5 = mockedFieldName5;\n        return this;\n    }\n\n"
                + "    public long getMockedFieldName6() {\n        return mockedFieldName6;\n    }\n\n"
                + "    public MockedClass setMockedFieldName6(long mockedFieldName6) {\n"
                + "        this.mockedFieldName6 = mockedFieldName6;\n        return this;\n    }\n\n"
                + "    public short getMockedFieldName7() {\n        return mockedFieldName7;\n    }\n\n"
                + "    public MockedClass setMockedFieldName7(short mockedFieldName7) {\n"
                + "        this.mockedFieldName7 = mockedFieldName7;\n        return this;\n    }\n\n"
                + "    public BigDecimal getMockedFieldName8() {\n        return mockedFieldName8;\n    }\n"
                + "\n    public MockedClass setMockedFieldName8(BigDecimal mockedFieldName8) {\n"
                + "        this.mockedFieldName8 = mockedFieldName8;\n        return this;\n    }\n\n"
                + "    public BigInteger getMockedFieldName9() {\n        return mockedFieldName9;\n    }\n"
                + "\n    public MockedClass setMockedFieldName9(BigInteger mockedFieldName9) {\n"
                + "        this.mockedFieldName9 = mockedFieldName9;\n        return this;\n    }\n\n"
                + "    public Boolean getMockedFieldName10() {\n        return mockedFieldName10;\n    }\n"
                + "\n    public MockedClass setMockedFieldName10(Boolean mockedFieldName10) {\n"
                + "        this.mockedFieldName10 = mockedFieldName10;\n        return this;\n    }\n\n"
                + "    public Byte getMockedFieldName11() {\n        return mockedFieldName11;\n    }\n"
                + "\n    public MockedClass setMockedFieldName11(Byte mockedFieldName11) {\n"
                + "        this.mockedFieldName11 = mockedFieldName11;\n        return this;\n    }\n\n"
                + "    public Character getMockedFieldName12() {\n        return mockedFieldName12;\n    }\n"
                + "\n    public MockedClass setMockedFieldName12(Character mockedFieldName12) {\n"
                + "        this.mockedFieldName12 = mockedFieldName12;\n        return this;\n    }\n\n"
                + "    public CharSequence getMockedFieldName13() {\n        return mockedFieldName13;\n"
                + "    }\n\n    public MockedClass setMockedFieldName13(CharSequence mockedFieldName13) {\n"
                + "        this.mockedFieldName13 = mockedFieldName13;\n        return this;\n    }\n\n"
                + "    public Double getMockedFieldName14() {\n        return mockedFieldName14;\n    }\n"
                + "\n    public MockedClass setMockedFieldName14(Double mockedFieldName14) {\n"
                + "        this.mockedFieldName14 = mockedFieldName14;\n        return this;\n    }\n\n"
                + "    public Float getMockedFieldName15() {\n        return mockedFieldName15;\n    }\n"
                + "\n    public MockedClass setMockedFieldName15(Float mockedFieldName15) {\n"
                + "        this.mockedFieldName15 = mockedFieldName15;\n        return this;\n    }\n\n"
                + "    public Integer getMockedFieldName16() {\n        return mockedFieldName16;\n    }\n"
                + "\n    public MockedClass setMockedFieldName16(Integer mockedFieldName16) {\n"
                + "        this.mockedFieldName16 = mockedFieldName16;\n        return this;\n    }\n\n"
                + "    public Long getMockedFieldName17() {\n        return mockedFieldName17;\n    }\n"
                + "\n    public MockedClass setMockedFieldName17(Long mockedFieldName17) {\n"
                + "        this.mockedFieldName17 = mockedFieldName17;\n        return this;\n    }\n\n"
                + "    public Number getMockedFieldName18() {\n        return mockedFieldName18;\n    }\n"
                + "\n    public MockedClass setMockedFieldName18(Number mockedFieldName18) {\n"
                + "        this.mockedFieldName18 = mockedFieldName18;\n        return this;\n    }\n\n"
                + "    public Object getMockedFieldName19() {\n        return mockedFieldName19;\n    }\n"
                + "\n    public MockedClass setMockedFieldName19(Object mockedFieldName19) {\n"
                + "        this.mockedFieldName19 = mockedFieldName19;\n        return this;\n    }\n\n"
                + "    public Short getMockedFieldName20() {\n        return mockedFieldName20;\n    }\n"
                + "\n    public MockedClass setMockedFieldName20(Short mockedFieldName20) {\n"
                + "        this.mockedFieldName20 = mockedFieldName20;\n        return this;\n    }\n\n"
                + "    public String getMockedFieldName21() {\n        return mockedFieldName21;\n    }\n"
                + "\n    public MockedClass setMockedFieldName21(String mockedFieldName21) {\n"
                + "        this.mockedFieldName21 = mockedFieldName21;\n        return this;\n    }\n\n"
                + "    public String[] getMockedFieldName22() {\n        return mockedFieldName22;\n    }\n"
                + "\n    public MockedClass setMockedFieldName22(String[] mockedFieldName22) {\n"
                + "        this.mockedFieldName22 = mockedFieldName22;\n        return this;\n    }\n\n"
                + "    public Collection<String> getMockedFieldName23() {\n        return mockedFieldName23;\n"
                + "    }\n\n" + "    public MockedClass setMockedFieldName23(Collection<String> mockedFieldName23) {\n"
                + "        this.mockedFieldName23 = mockedFieldName23;\n        return this;\n    }\n\n"
                + "    public Collection getMockedFieldName24() {\n        return mockedFieldName24;\n    }\n"
                + "\n    public MockedClass setMockedFieldName24(Collection mockedFieldName24) {\n"
                + "        this.mockedFieldName24 = mockedFieldName24;\n        return this;\n    }\n\n"
                + "    public Iterable<String> getMockedFieldName25() {\n        return mockedFieldName25;\n"
                + "    }\n\n" + "    public MockedClass setMockedFieldName25(Iterable<String> mockedFieldName25) {\n"
                + "        this.mockedFieldName25 = mockedFieldName25;\n        return this;\n    }\n\n"
                + "    public Iterable getMockedFieldName26() {\n        return mockedFieldName26;\n    }\n"
                + "\n    public MockedClass setMockedFieldName26(Iterable mockedFieldName26) {\n"
                + "        this.mockedFieldName26 = mockedFieldName26;\n        return this;\n    }\n\n"
                + "    public List<String> getMockedFieldName27() {\n        return mockedFieldName27;\n"
                + "    }\n\n    public MockedClass setMockedFieldName27(List<String> mockedFieldName27) {\n"
                + "        this.mockedFieldName27 = mockedFieldName27;\n        return this;\n    }\n\n"
                + "    public List getMockedFieldName28() {\n        return mockedFieldName28;\n    }\n"
                + "\n    public MockedClass setMockedFieldName28(List mockedFieldName28) {\n"
                + "        this.mockedFieldName28 = mockedFieldName28;\n        return this;\n    }\n\n"
                + "    public Map<String, BigInteger> getMockedFieldName29() {\n"
                + "        return mockedFieldName29;\n    }\n\n"
                + "    public MockedClass setMockedFieldName29(Map<String, BigInteger> mockedFieldName29) {\n"
                + "        this.mockedFieldName29 = mockedFieldName29;\n        return this;\n    }\n\n"
                + "    public Map getMockedFieldName30() {\n        return mockedFieldName30;\n    }\n\n"
                + "    public MockedClass setMockedFieldName30(Map mockedFieldName30) {\n"
                + "        this.mockedFieldName30 = mockedFieldName30;\n        return this;\n    }\n\n"
                + "    public Set<String> getMockedFieldName31() {\n        return mockedFieldName31;\n"
                + "    }\n\n    public MockedClass setMockedFieldName31(Set<String> mockedFieldName31) {\n"
                + "        this.mockedFieldName31 = mockedFieldName31;\n        return this;\n    }\n\n"
                + "    public Set getMockedFieldName32() {\n        return mockedFieldName32;\n    }\n\n"
                + "    public MockedClass setMockedFieldName32(Set mockedFieldName32) {\n"
                + "        this.mockedFieldName32 = mockedFieldName32;\n        return this;\n    }\n\n"
                + "    @Override\n    public boolean equals(Object o) {\n        if (o == this) {\n"
                + "            return true;\n        }\n        if (!(o instanceof MockedClass)) {\n"
                + "            return false;\n        }\n        MockedClass other = (MockedClass) o;\n"
                + "        if (this.isMockedFieldName0() != other.isMockedFieldName0()) {\n"
                + "            return false;\n        }\n"
                + "        if (this.getMockedFieldName1() != other.getMockedFieldName1()) {\n"
                + "            return false;\n        }\n"
                + "        if (this.getMockedFieldName2() != other.getMockedFieldName2()) {\n"
                + "            return false;\n        }\n"
                + "        if (Double.compare(this.getMockedFieldName3(), other.getMockedFieldName3()) != 0) {\n"
                + "            return false;\n        }\n"
                + "        if (Float.compare(this.getMockedFieldName4(), other.getMockedFieldName4()) != 0) {\n"
                + "            return false;\n        }\n"
                + "        if (this.getMockedFieldName5() != other.getMockedFieldName5()) {\n"
                + "            return false;\n        }\n"
                + "        if (this.getMockedFieldName6() != other.getMockedFieldName6()) {\n"
                + "            return false;\n        }\n"
                + "        if (this.getMockedFieldName7() != other.getMockedFieldName7()) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName8(), other.getMockedFieldName8())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName9(), other.getMockedFieldName9())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName10(), other.getMockedFieldName10())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName11(), other.getMockedFieldName11())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName12(), other.getMockedFieldName12())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName13(), other.getMockedFieldName13())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName14(), other.getMockedFieldName14())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName15(), other.getMockedFieldName15())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName16(), other.getMockedFieldName16())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName17(), other.getMockedFieldName17())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName18(), other.getMockedFieldName18())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName19(), other.getMockedFieldName19())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName20(), other.getMockedFieldName20())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName21(), other.getMockedFieldName21())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Arrays.equals(getMockedFieldName22(), other.getMockedFieldName22())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName23(), other.getMockedFieldName23())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName24(), other.getMockedFieldName24())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName25(), other.getMockedFieldName25())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName26(), other.getMockedFieldName26())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName27(), other.getMockedFieldName27())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName28(), other.getMockedFieldName28())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName29(), other.getMockedFieldName29())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName30(), other.getMockedFieldName30())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName31(), other.getMockedFieldName31())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName32(), other.getMockedFieldName32())) {\n"
                + "            return false;\n        }\n        return true;\n    }\n\n"
                + "    @Override\n    public int hashCode() {\n        int hashCode = 1;\n"
                + "        hashCode = 59 * hashCode + (isMockedFieldName0() ? 79 : 97);\n"
                + "        hashCode = 59 * hashCode + getMockedFieldName1();\n"
                + "        hashCode = 59 * hashCode + getMockedFieldName2();\n"
                + "        long aMockedFieldName3 = Double.doubleToLongBits(getMockedFieldName3());\n"
                + "        hashCode = 59 * hashCode + (int)(aMockedFieldName3 >>> 32 ^ aMockedFieldName3);\n"
                + "        hashCode = 59 * hashCode + Float.floatToIntBits(getMockedFieldName4());\n"
                + "        hashCode = 59 * hashCode + getMockedFieldName5();\n"
                + "        long aMockedFieldName6 = getMockedFieldName6();\n"
                + "        hashCode = 59 * hashCode + (int)(aMockedFieldName6 >>> 32 ^ aMockedFieldName6);\n"
                + "        hashCode = 59 * hashCode + getMockedFieldName7();\n"
                + "        Object aMockedFieldName8 = getMockedFieldName8();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName8 == null ? 0 : aMockedFieldName8.hashCode());\n"
                + "        Object aMockedFieldName9 = getMockedFieldName9();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName9 == null ? 0 : aMockedFieldName9.hashCode());\n"
                + "        Object aMockedFieldName10 = getMockedFieldName10();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName10 == null ? 0 : aMockedFieldName10.hashCode());\n"
                + "        Object aMockedFieldName11 = getMockedFieldName11();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName11 == null ? 0 : aMockedFieldName11.hashCode());\n"
                + "        Object aMockedFieldName12 = getMockedFieldName12();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName12 == null ? 0 : aMockedFieldName12.hashCode());\n"
                + "        Object aMockedFieldName13 = getMockedFieldName13();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName13 == null ? 0 : aMockedFieldName13.hashCode());\n"
                + "        Object aMockedFieldName14 = getMockedFieldName14();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName14 == null ? 0 : aMockedFieldName14.hashCode());\n"
                + "        Object aMockedFieldName15 = getMockedFieldName15();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName15 == null ? 0 : aMockedFieldName15.hashCode());\n"
                + "        Object aMockedFieldName16 = getMockedFieldName16();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName16 == null ? 0 : aMockedFieldName16.hashCode());\n"
                + "        Object aMockedFieldName17 = getMockedFieldName17();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName17 == null ? 0 : aMockedFieldName17.hashCode());\n"
                + "        Object aMockedFieldName18 = getMockedFieldName18();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName18 == null ? 0 : aMockedFieldName18.hashCode());\n"
                + "        Object aMockedFieldName19 = getMockedFieldName19();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName19 == null ? 0 : aMockedFieldName19.hashCode());\n"
                + "        Object aMockedFieldName20 = getMockedFieldName20();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName20 == null ? 0 : aMockedFieldName20.hashCode());\n"
                + "        Object aMockedFieldName21 = getMockedFieldName21();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName21 == null ? 0 : aMockedFieldName21.hashCode());\n"
                + "        Object aMockedFieldName22 = getMockedFieldName22();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName22 == null ? 0 : aMockedFieldName22.hashCode());\n"
                + "        Object aMockedFieldName23 = getMockedFieldName23();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName23 == null ? 0 : aMockedFieldName23.hashCode());\n"
                + "        Object aMockedFieldName24 = getMockedFieldName24();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName24 == null ? 0 : aMockedFieldName24.hashCode());\n"
                + "        Object aMockedFieldName25 = getMockedFieldName25();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName25 == null ? 0 : aMockedFieldName25.hashCode());\n"
                + "        Object aMockedFieldName26 = getMockedFieldName26();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName26 == null ? 0 : aMockedFieldName26.hashCode());\n"
                + "        Object aMockedFieldName27 = getMockedFieldName27();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName27 == null ? 0 : aMockedFieldName27.hashCode());\n"
                + "        Object aMockedFieldName28 = getMockedFieldName28();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName28 == null ? 0 : aMockedFieldName28.hashCode());\n"
                + "        Object aMockedFieldName29 = getMockedFieldName29();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName29 == null ? 0 : aMockedFieldName29.hashCode());\n"
                + "        Object aMockedFieldName30 = getMockedFieldName30();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName30 == null ? 0 : aMockedFieldName30.hashCode());\n"
                + "        Object aMockedFieldName31 = getMockedFieldName31();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName31 == null ? 0 : aMockedFieldName31.hashCode());\n"
                + "        Object aMockedFieldName32 = getMockedFieldName32();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName32 == null ? 0 : aMockedFieldName32.hashCode());\n"
                + "        return hashCode;\n    }\n\n    @Override\n    public String toString() {\n"
                + "        return String.format(\"MockedClass(mockedFieldName0=%s, mockedFieldName1=%s, "
                + "mockedFieldName2=%s, mockedFieldName3=%s, mockedFieldName4=%s, mockedFieldName5=%s, "
                + "mockedFieldName6=%s, mockedFieldName7=%s, mockedFieldName8=%s, mockedFieldName9=%s, "
                + "mockedFieldName10=%s, mockedFieldName11=%s, mockedFieldName12=%s, mockedFieldName13=%s, "
                + "mockedFieldName14=%s, mockedFieldName15=%s, mockedFieldName16=%s, mockedFieldName17=%s, "
                + "mockedFieldName18=%s, mockedFieldName19=%s, mockedFieldName20=%s, mockedFieldName21=%s, "
                + "mockedFieldName22=%s, mockedFieldName23=%s, mockedFieldName24=%s, mockedFieldName25=%s, "
                + "mockedFieldName26=%s, mockedFieldName27=%s, mockedFieldName28=%s, mockedFieldName29=%s, "
                + "mockedFieldName30=%s, mockedFieldName31=%s, mockedFieldName32=%s)\", isMockedFieldName0(), "
                + "getMockedFieldName1(), getMockedFieldName2(), getMockedFieldName3(), getMockedFieldName4(), "
                + "getMockedFieldName5(), getMockedFieldName6(), getMockedFieldName7(), getMockedFieldName8(), "
                + "getMockedFieldName9(), getMockedFieldName10(), getMockedFieldName11(), getMockedFieldName12(), "
                + "getMockedFieldName13(), getMockedFieldName14(), getMockedFieldName15(), getMockedFieldName16(), "
                + "getMockedFieldName17(), getMockedFieldName18(), getMockedFieldName19(), getMockedFieldName20(), "
                + "getMockedFieldName21(), getMockedFieldName22(), getMockedFieldName23(), getMockedFieldName24(), "
                + "getMockedFieldName25(), getMockedFieldName26(), getMockedFieldName27(), getMockedFieldName28(), "
                + "getMockedFieldName29(), getMockedFieldName30(), getMockedFieldName31(), getMockedFieldName32());\n"
                + "    }\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentConfigWithoutLombokAnnotationsTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setFields(4).setSuperclass()
                .setInterfaces(2).build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getWithoutLombokAnnotations(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport field.mock.MockedFieldType0;\n"
                + "import field.mock.MockedFieldType1;\nimport field.mock.MockedFieldType2;\n"
                + "import field.mock.MockedFieldType3;\n\nimport interface.mock.MockedInterface0;\n"
                + "import interface.mock.MockedInterface1;\n\nimport java.util.Objects;\n\n"
                + "import superclass.mock.MockedSuperclass;\n\n"
                + "public class MockedClass extends MockedSuperclass implements MockedInterface0, MockedInterface1 {\n"
                + "\n    private MockedFieldType0 mockedFieldName0;\n\n"
                + "    private MockedFieldType1 mockedFieldName1;\n\n"
                + "    private MockedFieldType2 mockedFieldName2;\n\n"
                + "    private MockedFieldType3 mockedFieldName3;\n\n"
                + "    public MockedFieldType0 getMockedFieldName0() {\n        return mockedFieldName0;\n"
                + "    }\n\n    public MockedClass setMockedFieldName0(MockedFieldType0 mockedFieldName0) {\n"
                + "        this.mockedFieldName0 = mockedFieldName0;\n        return this;\n    }\n\n"
                + "    public MockedFieldType1 getMockedFieldName1() {\n        return mockedFieldName1;\n"
                + "    }\n\n    public MockedClass setMockedFieldName1(MockedFieldType1 mockedFieldName1) {\n"
                + "        this.mockedFieldName1 = mockedFieldName1;\n        return this;\n    }\n\n"
                + "    public MockedFieldType2 getMockedFieldName2() {\n        return mockedFieldName2;\n"
                + "    }\n\n    public MockedClass setMockedFieldName2(MockedFieldType2 mockedFieldName2) {\n"
                + "        this.mockedFieldName2 = mockedFieldName2;\n        return this;\n    }\n\n"
                + "    public MockedFieldType3 getMockedFieldName3() {\n        return mockedFieldName3;\n"
                + "    }\n\n    public MockedClass setMockedFieldName3(MockedFieldType3 mockedFieldName3) {\n"
                + "        this.mockedFieldName3 = mockedFieldName3;\n        return this;\n    }\n\n"
                + "    @Override\n    public boolean equals(Object o) {\n        if (o == this) {\n"
                + "            return true;\n        }\n        if (!(o instanceof null)) {\n"
                + "            return false;\n        }\n        null other = (null) o;\n"
                + "        if (!super.equals(other)) {\n            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName0(), other.getMockedFieldName0())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName1(), other.getMockedFieldName1())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName2(), other.getMockedFieldName2())) {\n"
                + "            return false;\n        }\n"
                + "        if (!Objects.equals(getMockedFieldName3(), other.getMockedFieldName3())) {\n"
                + "            return false;\n        }\n        return true;\n    }\n\n"
                + "    @Override\n    public int hashCode() {\n        int hashCode = 1;\n"
                + "        hashCode = 59 * hashCode + super.hashCode();\n"
                + "        Object aMockedFieldName0 = getMockedFieldName0();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName0 == null ? 0 : aMockedFieldName0.hashCode());\n"
                + "        Object aMockedFieldName1 = getMockedFieldName1();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName1 == null ? 0 : aMockedFieldName1.hashCode());\n"
                + "        Object aMockedFieldName2 = getMockedFieldName2();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName2 == null ? 0 : aMockedFieldName2.hashCode());\n"
                + "        Object aMockedFieldName3 = getMockedFieldName3();\n"
                + "        hashCode = 59 * hashCode + (aMockedFieldName3 == null ? 0 : aMockedFieldName3.hashCode());\n"
                + "        return hashCode;\n    }\n\n    @Override\n    public String toString() {\n"
                + "        return String.format(\"null(super=%s, mockedFieldName0=%s, mockedFieldName1=%s, "
                + "mockedFieldName2=%s, mockedFieldName3=%s)\", super.toString(), getMockedFieldName0(), "
                + "getMockedFieldName1(), getMockedFieldName2(), getMockedFieldName3());\n    }\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentDefaultConfigTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n"
                + "@Accessors(chain = true)\n@Data\npublic class MockedClass {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentWithSeveralFieldsDefaultConfigTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setFields(2).build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport field.mock.MockedFieldType0;\n"
                + "import field.mock.MockedFieldType1;\n\nimport lombok.Data;\n"
                + "import lombok.experimental.Accessors;\n\n@Accessors(chain = true)\n@Data\n"
                + "public class MockedClass {\n\n    private MockedFieldType0 mockedFieldName0;\n\n"
                + "    private MockedFieldType1 mockedFieldName1;\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentWithSeveralInterfacesDefaultConfigTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setInterfaces(2).build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport interface.mock.MockedInterface0;\n"
                + "import interface.mock.MockedInterface1;\n\nimport lombok.Data;\n"
                + "import lombok.experimental.Accessors;\n\n@Accessors(chain = true)\n@Data\n"
                + "public class MockedClass implements MockedInterface0, MockedInterface1 {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentWithSingleFieldDefaultConfigTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setFields(1).build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport field.mock.MockedFieldType0;\n\n"
                + "import lombok.Data;\nimport lombok.experimental.Accessors;\n\n"
                + "@Accessors(chain = true)\n@Data\npublic class MockedClass {\n\n"
                + "    private MockedFieldType0 mockedFieldName0;\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentWithSingleInterfaceDefaultConfigTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setInterfaces(1).build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport interface.mock.MockedInterface0;\n\n"
                + "import lombok.Data;\nimport lombok.experimental.Accessors;\n\n"
                + "@Accessors(chain = true)\n@Data\npublic class MockedClass implements MockedInterface0 {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentWithSuperclassAndSeveralInterfacesDefaultConfigTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setSuperclass().setInterfaces(2)
                .build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport interface.mock.MockedInterface0;\n"
                + "import interface.mock.MockedInterface1;\n\nimport lombok.Data;\n"
                + "import lombok.EqualsAndHashCode;\nimport lombok.ToString;\n"
                + "import lombok.experimental.Accessors;\n\nimport superclass.mock.MockedSuperclass;\n\n"
                + "@Accessors(chain = true)\n@Data\n@EqualsAndHashCode(callSuper = true)\n"
                + "@ToString(callSuper = true)\npublic class MockedClass extends MockedSuperclass "
                + "implements MockedInterface0, MockedInterface1 {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateClassContentWithSuperclassDefaultConfigTest() {
        SchemaObject schemaObject = MockedEntityBuilder.getMockedClassBuilder().setSuperclass().build();
        String classContent = getClassContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaObject);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n"
                + "import lombok.ToString;\nimport lombok.experimental.Accessors;\n\n"
                + "import superclass.mock.MockedSuperclass;\n\n@Accessors(chain = true)\n@Data\n"
                + "@EqualsAndHashCode(callSuper = true)\n@ToString(callSuper = true)\n"
                + "public class MockedClass extends MockedSuperclass {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateEnumContentDefaultConfigTest() {
        SchemaEnum schemaEnum = MockedEntityBuilder.getMockedEnumBuilder().build();
        String classContent = getEnumContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaEnum);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\npublic enum MockedEnum {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateEnumContentSeveralConstantFieldsDefaultConfigTest() {
        SchemaEnum schemaEnum = MockedEntityBuilder.getMockedEnumBuilder().setFields(2).build();
        String classContent = getEnumContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaEnum);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\npublic enum MockedEnum {\n    mockedFieldName0,\n"
                + "    mockedFieldName1\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateEnumContentSeveralInterfacesDefaultConfigTest() {
        SchemaEnum schemaEnum = MockedEntityBuilder.getMockedEnumBuilder().setInterfaces(2).build();
        String classContent = getEnumContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaEnum);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport interface.mock.MockedInterface0;\n"
                + "import interface.mock.MockedInterface1;\n\n"
                + "public enum MockedEnum implements MockedInterface0, MockedInterface1 {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateEnumContentSingleConstantFieldDefaultConfigTest() {
        SchemaEnum schemaEnum = MockedEntityBuilder.getMockedEnumBuilder().setFields(1).build();
        String classContent = getEnumContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaEnum);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\npublic enum MockedEnum {\n    mockedFieldName0\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateEnumContentSingleInterfaceDefaultConfigTest() {
        SchemaEnum schemaEnum = MockedEntityBuilder.getMockedEnumBuilder().setInterfaces(1).build();
        String classContent = getEnumContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaEnum);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport interface.mock.MockedInterface0;\n\n"
                + "public enum MockedEnum implements MockedInterface0 {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateInterfaceContentDefaultConfigTest() {
        SchemaInterface schemaInterface = MockedEntityBuilder.getMockedInterfaceBuilder().build();
        String classContent = getInterfaceContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaInterface);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\npublic interface MockedInterface {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateInterfaceContentSeveralSuperInterfacesDefaultConfigTest() {
        SchemaInterface schemaInterface = MockedEntityBuilder.getMockedInterfaceBuilder().setInterfaces(2).build();
        String classContent = getInterfaceContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaInterface);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport interface.mock.MockedInterface0;\n"
                + "import interface.mock.MockedInterface1;\n\n"
                + "public interface MockedInterface extends MockedInterface0, MockedInterface1 {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    @Test
    void generateInterfaceContentSingleSuperInterfaceDefaultConfigTest() {
        SchemaInterface schemaInterface = MockedEntityBuilder.getMockedInterfaceBuilder().setInterfaces(1).build();
        String classContent = getInterfaceContentGenerator()
                .generate(JavaClassGeneratorConfigProvider.getDefault(), schemaInterface);
        String expectedContent = "// generated by com.github.vladislavsevruk:java-class-generator\n"
                + "package entity.mock;\n\nimport interface.mock.MockedInterface0;\n\n"
                + "public interface MockedInterface extends MockedInterface0 {\n}\n";
        Assertions.assertEquals(expectedContent, classContent);
    }

    private JavaClassContentGenerator getClassContentGenerator() {
        return new JavaClassContentGenerator(new ClassContentGeneratorProvider());
    }

    private JavaClassContentGenerator getEnumContentGenerator() {
        return new JavaClassContentGenerator(new EnumContentGeneratorProvider());
    }

    private JavaClassContentGenerator getInterfaceContentGenerator() {
        return new JavaClassContentGenerator(new InterfaceContentGeneratorProvider());
    }
}
